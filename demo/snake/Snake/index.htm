<!DOCTYPE HTML>
<html>
<head>
    <title>貪吃蛇</title>
    <meta http-equiv="Content-type" content="text/html; charset=utf-8">
    <script src="jquery-1.4.2.js"></script>
    <script src="jquery.hotkeys.js"></script>
    <script src="hammer.min.js"></script>
</head>
<body>
    <canvas id="canvas" width="600" height="700" style="background-color: rgb(222, 222, 222)">不支援canvas</canvas>
    <bgSound id="sound" src="" loop=1>
    <audio id="coin" src="coin.mp3" preload="auto"></audio>
    <audio id="die" src="die.mp3" preload="auto"></audio>
    <script type="text/javascript">
        (function () {
            function isMobile(){
                var a = navigator.userAgent||navigator.vendor||window.opera;
                return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s)|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg(g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4));
            }
            var snakeGame = {
                canvas: document.getElementById('canvas'),
                ctx: canvas.getContext('2d'),
                touch: {
                    hammer: new Hammer(canvas), //偵測移動事件
                    enable: isMobile(),
                    face: 0
                },
                portal: 0, //傳送門
                round: 1, //循環
                pause: 0, //暫停
                size: 20, //一格寬度
                row: 30, //一行格子數
                col: 35, //一列格子數
                mouse: {
                    x: 0,
                    y: 0,
                    down: {
                        x: 0,
                        y: 0,
                        state: 0 //用來記錄按下按鍵
                    }
                },
                snake: {
                    initLength: 3, //初始長度
                    body: null,
                    speed: 7,
                    face: 2 //面對方向
                },
                food: {
                    x: 0,
                    y: 0,
                    exist: 0
                },
                init: function () {
                    this.initSnake();
                    me = this;
                    setInterval(function () {
                        me.display();
                    }, 30);
                    this.canvas.addEventListener('mousemove', function(evt) {
                        me.mouse.x = evt.clientX - me.canvas.getBoundingClientRect().left;
                        me.mouse.y = evt.clientY - me.canvas.getBoundingClientRect().top;
                    }, false);
                    this.canvas.addEventListener('mousedown', function() {
                        me.mouse.down.x = Math.round((me.mouse.x - (me.size * 0.5)) / me.size);
                        me.mouse.down.y = Math.round((me.mouse.y - (me.size * 0.5)) / me.size);
                        me.mouse.down.state = 1;
                    }, false);
                    this.move();
                },
                initSnake: function () {
                    this.snake.body = new Array();
                    this.snake.speed = 7;
                    this.snake.face = 2
                    for (var i = 0; i < this.snake.initLength; i++) {
                        this.snake.body[i] = {
                            x: 0,
                            y: - i
                        };
                    };
                    this.pause = 0;
                },
                move: function () {
                    if (!this.pause) {
                        //console.log(this.snake.body[0].x + "," + this.snake.body[0].y);
                        if (this.mouse.down.state && this.portal) { //傳送門模式
                            //console.log(this.mouse.down.x + "," + this.mouse.down.y);
                            this.mouse.down.state = 0;
                            var nextStep = {
                                x: this.mouse.down.x,
                                y: this.mouse.down.y
                            };
                        }
                        else {
                            var nextStep = {
                                x: this.snake.body[0].x + ((this.snake.face % 2 == 0) ? ((this.snake.face) ? 1 : -1) : 0),
                                y: this.snake.body[0].y + ((this.snake.face % 2 != 0) ? ((this.snake.face - 1) ? 1 : -1) : 0)
                            };
                            if (this.round) {
                                nextStep.x = (nextStep.x + this.row) % this.row;
                                nextStep.y = (nextStep.y + this.col) % this.col;
                            }
                        }
                        
                        if (this.food.exist) {
                            if (nextStep.x == this.food.x && nextStep.y == this.food.y) {
                                this.snake.body[this.snake.body.length] = {
                                    x: this.snake.body[this.snake.body.length - 1].x,
                                    y: this.snake.body[this.snake.body.length - 1].y
                                }
                                this.food.exist = 0;
                                document.getElementById("coin").currentTime = 0;
                                document.getElementById("coin").play();
                            }
                        }
                        //計算新的食物位置
                        while (!this.food.exist) {
                            this.food.exist = 1;
                            this.food.x = Math.round(Math.random() * (this.row - 1));
                            this.food.y = Math.round(Math.random() * (this.col - 1));
                            for (var i = 0; i < this.snake.body.length; i++) {
                                if (this.snake.body[i].x == this.food.x && this.snake.body[i].y == this.food.y) {
                                    this.food.exist = 0;
                                }
                            };
                        }
                        var overlapping = 0; //吃到自己
                        if (nextStep.x >= 0 && nextStep.x < this.row) {
                            if (nextStep.y >= 0 && nextStep.y < this.col) {
                                for (var i = this.snake.body.length - 1; i > 0; i--) {
                                    if (nextStep.x == this.snake.body[i].x && nextStep.y == this.snake.body[i].y) {
                                        if (i != (this.snake.body.length - 1)) {
                                            overlapping = 1;
                                        }
                                    }
                                }
                                if (!overlapping) {
                                    for (var i = this.snake.body.length - 1; i > 0; i--) {
                                        this.snake.body[i].x = this.snake.body[i - 1].x;
                                        this.snake.body[i].y = this.snake.body[i - 1].y;
                                    };
                                    this.snake.body[0].x = nextStep.x;
                                    this.snake.body[0].y = nextStep.y;
                                }
                                else {
                                    if (this.die()) {
                                        me = this;
                                        document.getElementById("die").currentTime = 0;
                                        document.getElementById("die").play();
                                        setTimeout(function () {
                                            me.initSnake();
                                        }, 2000);
                                        this.pause = 1;
                                    }
                                }
                            }
                        }
                    }
                    me = this;
                    setTimeout(function () {
                        me.move();
                    }, 1000 / this.snake.speed);
                },
                getPhoneGapPath: function () {
                    var path = window.location.pathname;
                    path = path.substr(path, path.length - 10);
                    return 'file://' + path;
                },
                playAudio: function (url) {
                    var my_media = new Media(url, function() {
                        console.log( "playAudio():Audio Success" );
                    }, function( err ) {
                        console.log( "playAudio():Audio Error: " + err );
                    });
                    my_media.play(); // 開始播放

                    //my_media.stop();
                    //my_media.release();
                },
                die: function () {
                    for (var face = 0; face < 4; face++) {
                        var nextStep = {
                            x: this.snake.body[0].x + ((face % 2 == 0) ? ((face) ? 1 : -1) : 0),
                            y: this.snake.body[0].y + ((face % 2 != 0) ? ((face - 1) ? 1 : -1) : 0)
                        };
                        if (this.round) {
                            nextStep.x = (nextStep.x + this.row) % this.row;
                            nextStep.y = (nextStep.y + this.col) % this.col;
                        }
                        var overlapping = 0; //吃到自己
                        if (nextStep.x >= 0 && nextStep.x < this.row) {
                            if (nextStep.y >= 0 && nextStep.y < this.col) {
                                for (var i = this.snake.body.length - 1; i > 0; i--) {
                                    if (nextStep.x == this.snake.body[i].x && nextStep.y == this.snake.body[i].y) {
                                        if (i != (this.snake.body.length - 1)) {
                                            overlapping = 1;
                                        }
                                    }
                                }
                                if (!overlapping) {
                                    return 0;
                                }
                            }
                        }
                    }
                    return 1;
                },
                display: function () {
                    this.ctx.clearRect(0, 0, 600, 700);
                    this.ctx.strokeRect(0, 0, this.size * this.row, this.size * this.col);
                    this.ctx.fillStyle = "rgb(200,0,0)";
                    for (var i = 0; i < this.snake.body.length; i++) {
                        this.ctx.fillRect(this.snake.body[i].x * this.size, this.snake.body[i].y * this.size, this.size, this.size);
                        this.ctx.strokeRect(this.snake.body[i].x * this.size, this.snake.body[i].y * this.size, this.size, this.size);
                    };
                    //眼睛
                    this.ctx.beginPath();
                    this.ctx.fillStyle = "rgb(0,0,0)";
                    this.ctx.arc((this.snake.body[0].x + (this.snake.face < 2 != this.snake.face % 2 ? 0.25 : 0.75)) * this.size, (this.snake.body[0].y + (this.snake.face < 2 ? 0.25 : 0.75)) * this.size, this.size / 10, 0, Math.PI * 2, true);
                    this.ctx.arc((this.snake.body[0].x + (this.snake.face < 2 ? 0.25 : 0.75)) * this.size, (this.snake.body[0].y + (this.snake.face >= 2 != this.snake.face % 2 ? 0.25 : 0.75)) * this.size, this.size / 10, 0, Math.PI * 2, true);
                    this.ctx.closePath();
                    this.ctx.fill();

                    if (this.food.exist) {
                        this.ctx.fillStyle = "rgb(0,255,0)";
                        this.ctx.fillRect(this.food.x * this.size, this.food.y * this.size, this.size, this.size);
                        this.ctx.strokeRect(this.food.x * this.size, this.food.y * this.size, this.size, this.size);
                    }
                }
            };
            snakeGame.init();

            $(document).bind('keydown', 'left', function(){
                snakeGame.snake.face = 0;
            });
            $(document).bind('keydown', 'up', function(){
                snakeGame.snake.face = 1;
            });
            $(document).bind('keydown', 'right', function(){
                snakeGame.snake.face = 2;
            });
            $(document).bind('keydown', 'down', function(){
                snakeGame.snake.face = 3;
            });

            var touchesX = [], touchY = [];
            var posXstart, posXrange, posXnow = 0; // X軸的起始位置,X軸的滑動範圍,X軸的現在位置
            var posYstart, posYrange, posYnow = 0; // X軸的起始位置,X軸的滑動範圍,X軸的現在位置</code>
             
            snakeGame.canvas.addEventListener("touchstart", function (e) { //紀錄下觸控的事件
               //event.preventDefault(); //預防原先的事件觸發
               posXstart = e.touches[0].pageX; //touches[0]為第一個所下的觸控點
               posYstart = e.touches[0].pageY; //touches[0]為第一個所下的觸控點
               console.log(posXstart + ',' + posYstart);
            },false);
             
            snakeGame.canvas.addEventListener("touchmove", function (e) { //紀錄移動的事件
               //event.preventDefault();
               posXrange = -(parseInt(e.touches[0].pageX - posXstart)); //touches[0]X軸移動的距離
               posXnow = posXnow + posXrange; //上一個位置與移動距離為新的X座標位置
               posYrange = -(parseInt(e.touches[0].pageY - posYstart)); //touches[0]Y軸移動的距離
               posYnow = posYnow + posYrange; //上一個位置與移動距離為新的Y座標位置
            },false);
            snakeGame.canvas.addEventListener("touchend", function (e) { //紀錄移動的事件

               console.log('(' + posXrange + ',' + posYrange + ')');
            },false);

            if (snakeGame.touch.enable) {
                // snakeGame.touch.hammer.on("swipeleft", function(evt) { //測試用
                //     snakeGame.snake.face = 0;
                // });
                // snakeGame.touch.hammer.on("swiperight", function(evt) { //測試用
                //     snakeGame.snake.face = 2;
                // });
                snakeGame.touch.hammer.on("panleft", function(evt) {
                    snakeGame.touch.face = 0;
                });
                snakeGame.touch.hammer.on("panright", function(evt) {
                    snakeGame.touch.face = 2;
                });
                snakeGame.touch.hammer.on("panup", function(evt) {
                    snakeGame.touch.face = 1;
                });
                snakeGame.touch.hammer.on("pandown", function(evt) {
                    snakeGame.touch.face = 3;
                });
                snakeGame.touch.hammer.on("panend", function(evt) {
                    snakeGame.snake.face = snakeGame.touch.face;
                });
            }

            $(document).bind('keydown', 'f2', function(){snakeGame.initSnake();});
            $(document).bind('keydown', 'f4', function(){snakeGame.pause = 1 - snakeGame.pause;});
        }) ();
    </script>
</body>
</html>