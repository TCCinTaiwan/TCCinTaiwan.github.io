<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-type" content="text/html; charset=utf-8">
    <title>圍棋</title>
</head>
<body>
    <!-- <div id="info"></div> -->
    <canvas id="canvas" width="420" height="420" style="background-color: rgb(200, 100, 42)">不支援canvas</canvas>
    <script type="text/javascript">
        var GoGame = {
            canvas: document.getElementById('canvas'),
            ctx: canvas.getContext('2d'),
            size: 19,
            spacing: 20,
            x: 0,
            y: 0,
            step: 0,
            steps: new Array(),
            mouse: {
                x: 0,
                y: 0
            },
            chessBoard: new Array(this.size),
            init: function () {
                this.step = 0;
                for (var y = 0; y < this.size; y++) {
                    this.chessBoard[y] = new Array(this.size);
                    for (var x = 0; x < this.size; x++) {
                        this.chessBoard[y][x] = -1;
                    }
                }

                go = this; // 傳遞this
                this.canvas.addEventListener('mousemove', function(evt) {
                    go.mouse.x = evt.clientX - go.canvas.getBoundingClientRect().left;
                    go.mouse.y = evt.clientY - go.canvas.getBoundingClientRect().top;
                    if (go.mouse.x >= go.spacing) {
                        if (go.mouse.x <= (go.size + 0.5) * go.spacing) {
                            go.x = Math.round(go.mouse.x / go.spacing - 1.5);
                        } else {
                            go.x = go.size - 1;
                        }
                    } else {
                        go.x = 0;
                    }
                    if (go.mouse.y >= go.spacing) {
                        if (go.mouse.y <= (go.size + 0.5) * go.spacing) {
                            go.y = Math.round(go.mouse.y / go.spacing - 1.5);
                        } else {
                            go.y = go.size - 1;
                        }
                    } else {
                        go.y = 0;
                    }
                    // document.getElementById('info').innerText = String.fromCharCode(go.x + (go.x >= 8 ? 66 : 65)) + (go.y + 1) + "(" + go.mouse.x + ", " + go.mouse.y + ")";
                    go.reflesh();

                }, false);
                this.canvas.addEventListener('mousedown', function(evt) {
                    go.putChess();
                }, false);
                this.reflesh();
            },
            inChessBoard: function (x, y) {
                return x >= 0 && x < this.size && y >= 0 && y < this.size;
            },
            getBlockAndAir: function (x, y) {
                var block = [
                    {x: x,  y: y}
                ]
                var i = 0;
                var air = new Array();
                while (i < block.length) {
                    var x = block[i].x;
                    var y = block[i].y;
                    for (j = 0; j < 4; j++) {
                        var offset = {
                            x: x + (j > 1 ? j % 2 * 2 - 1 : 0),
                            y: y + (j < 2 ? j % 2 * 2 - 1 : 0)
                        };
                        if (this.inChessBoard(offset.x, offset.y)) {
                            // console.log(" " + offset.x + ", " + offset.y);
                            if (this.chessBoard[offset.y][offset.x] < 0) {
                                // console.log("air");
                                if (air.filter(function(position) {return position.x == offset.x && position.y == offset.y;}).length == 0) {
                                    air.push(offset);
                                }
                            } else if (this.chessBoard[y][x] % 2 == this.chessBoard[offset.y][offset.x] % 2) {
                                if (block.filter(function(position) {return position.x == offset.x && position.y == offset.y;}).length == 0) {
                                    block.push(offset);
                                }

                            }
                        }
                    }
                    i++;
                }
                return {
                    block: block,
                    air: air
                };
            },
            killBlock: function (block) {
                for (i in block) {
                    this.chessBoard[block[i].y][block[i].x] = -1;
                }
                this.reflesh();
                // draw
            },
            putChess: function () {
                if (this.chessBoard[this.y][this.x] < 0) {
                    // console.log(this.x + ", " + this.y);
                    this.chessBoard[this.y][this.x] = this.step;
                    this.steps.push(String.fromCharCode(this.x + (this.x >= 8 ? 66 : 65)) + (this.y + 1));
                    // 是否吃掉周圍
                    for (i = 0; i < 4; i++) {
                        var offset = {
                            x: this.x + (i > 1 ? i % 2 * 2 - 1 : 0),
                            y: this.y + (i < 2 ? i % 2 * 2 - 1 : 0)
                        };
                        if (this.inChessBoard(offset.x, offset.y)) {
                            if (this.chessBoard[offset.y][offset.x] >= 0) {
                                // console.log(offset);
                                // console.log((this.chessBoard[offset.y][offset.x] % 2 ? "白" : "黑") + offset.x + ", " + offset.y);
                                if (this.chessBoard[this.y][this.x] % 2 != this.chessBoard[offset.y][offset.x] % 2) {
                                    var blockAndAir = this.getBlockAndAir(offset.x, offset.y);
                                    // console.log(blockAndAir);
                                    if (blockAndAir.air.length == 0) {
                                        this.killBlock(blockAndAir.block);
                                    }
                                }
                            }
                        }
                    }
                    // 判斷是否為無效動作
                    var blockAndAir = this.getBlockAndAir(this.x, this.y);
                    if (blockAndAir.air.length == 0) {
                        this.chessBoard[this.y][this.x] = -1;
                        this.steps.pop();
                    } else {
                        this.step++;
                        this.reflesh();
                        // console.table(this.chessBoard);
                    }
                }
            },
            reflesh: function () {
                this.ctx.clearRect(0, 0, 420, 420);
                this.ctx.fillStyle = "rgb(0,0,0)";
                // 畫外框
                this.ctx.strokeRect(this.spacing * 1.5, this.spacing * 1.5, (this.size - 1) * this.spacing, (this.size - 1) * this.spacing);
                this.ctx.font = "6px monospace";

                this.ctx.fillText("a", 0, 0);
                // 橫豎各畫19條線
                for (var n = 0; n < this.size; n++) {
                    // console.log(this.ctx.measureText(n + 1).width)
                    this.ctx.fillText(n + 1, this.spacing * (n < 9 ? 0.4 : 0.25) , (n + 1.7) * this.spacing);
                    this.ctx.beginPath();
                    this.ctx.moveTo(this.spacing * 1.5, (n + 1.5) * this.spacing);
                    this.ctx.lineTo((this.size + 0.5) * this.spacing, (n + 1.5) * this.spacing);
                    this.ctx.stroke();

                    this.ctx.fillText(String.fromCharCode(n + (n >= 8 ? 66 : 65)), (n + 1.3) * this.spacing, this.spacing * 0.75);
                    this.ctx.beginPath();
                    this.ctx.moveTo((n + 1.5) * this.spacing, this.spacing * 1.5);
                    this.ctx.lineTo((n + 1.5) * this.spacing, (this.size + 0.5) * this.spacing);
                    this.ctx.stroke();
                }
                // 畫星位與天元
                star = [3, 9, 15];
                for (var y in star) {
                    for (var x in star) {
                        this.ctx.beginPath();
                        this.ctx.arc((star[x] + 1.5) * this.spacing, (star[y] + 1.5) * this.spacing, this.spacing / 5, 0, Math.PI * 2, true);
                        this.ctx.closePath();
                        this.ctx.fill();
                    }
                }

                // 畫手上拿的棋子
                if (this.chessBoard[this.y][this.x] < 0) {
                    this.ctx.fillStyle = (this.step % 2) ? "rgb(255,255,255)" : "rgb(0,0,0)";
                    this.ctx.beginPath();
                    this.ctx.arc((this.x + 1.5) * this.spacing, (this.y + 1.5) * this.spacing, this.spacing / 2.5, 0, Math.PI * 2, true);
                    this.ctx.closePath();
                    this.ctx.fill();
                }
                for (var y = 0; y < this.size; y++) {
                    for (var x = 0; x < this.size; x++) {
                        if (this.chessBoard[y][x] >= 0) {
                            this.ctx.fillStyle = (this.chessBoard[y][x] % 2) ? "rgb(255,255,255)" : "rgb(0,0,0)";
                            this.ctx.beginPath();
                            this.ctx.arc((x + 1.5) * this.spacing, (y + 1.5) * this.spacing, this.spacing / 2.5, 0, Math.PI * 2, true);
                            this.ctx.closePath();
                            this.ctx.fill();
                        }
                    }
                }

            }
        }
        GoGame.init();
    </script>
</body>
</html>